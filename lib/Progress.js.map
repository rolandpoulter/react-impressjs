{"version":3,"sources":["../src/components/Progress.js"],"names":["Progress","props","progress","progressDivision","stepsData","activeStep","color_gold","color_gray","ua","navigator","userAgent","toLowerCase","progressWidth","search","stepsTotal","Math","round","currentStepIndex","Object","keys","findIndex","s","id","percent","parseInt","position","bottom","width","display","fontSize","color","textAlign","opacity","paddingLeft","Component","propTypes","PropTypes","bool","number","object","shape","string","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;6BACV;AAAA,mBACqD,KAAKC,KAD1D;AAAA,UACAC,QADA,UACAA,QADA;AAAA,UACUC,gBADV,UACUA,gBADV;AAAA,UAC4BC,SAD5B,UAC4BA,SAD5B;AAAA,UACuCC,UADvC,UACuCA,UADvC;;AAEP,UAAMC,aAAa,SAAnB;AAAA,UACMC,aAAa,SADnB;AAEA,UAAMC,KAAKC,UAAUC,SAAV,CAAoBC,WAApB,EAAX;AACA,UAAMC,gBAAiBJ,GAAGK,MAAH,CAAU,2BAAV,MAA2C,CAAC,CAA7C,GAChB,GADgB,GAEhB,CAFN;AALO,UAQFC,UARE,GAQY,KAAKb,KARjB,CAQFa,UARE;;;AAUP,UAAIA,aAAa,CAAjB,EAAoB;AAClBA,qBAAaC,KAAKC,KAAL,CAAWF,aAAaX,gBAAxB,CAAb;AACD;;AAED,UAAIc,mBACFC,OAAOC,IAAP,CAAYf,SAAZ,EAAuBgB,SAAvB,CAAiC,UAACC,CAAD;AAAA,eAAOA,MAAMhB,WAAWiB,EAAxB;AAAA,OAAjC,CADF;;AAIA,UAAIL,mBAAmB,CAAvB,EAA0B;AACxBA,2BAAmBF,KAAKC,KAAL,CAAWC,mBAAmBd,gBAA9B,CAAnB;AACD;;AAED,UAAIoB,UAAUC,SAAU,CAACP,mBAAmB,CAApB,IAAyBH,UAA1B,GAAwC,GAAjD,EAAsD,EAAtD,CAAd;;AAEA,aACI;AAAA;AAAA,UAAK,OAAO;AACVW,sBAAU,OADA;AAEVC,oBAAQ,MAFE;AAGVC,mBAAO,MAHG;AAIVC,qBAAS1B,WAAW,OAAX,GAAqB;AAJpB,WAAZ;AAME;AAAA;AAAA,YAAG,OAAO;AACR2B,wBAAU,EADF;AAERC,qBAAOvB,UAFC;AAGRwB,yBAAW,QAHH;AAIRC,uBAAS;AAJD,aAAV;AAMU;AAAA;AAAA;AACIf,+BAAmB,CADvB;AAEE;AAAA;AAAA,gBAAM,OAAO,EAACgB,aAAa,CAAd,EAAiBJ,UAAU,EAA3B,EAAb;AACG,oBAAOf;AADV;AAFF;AANV,SANF;AAmBE,sCAAC,gBAAD,IAAM,SAASS,OAAf;AACM,yBAAc,QADpB;AAEM,uBAAaX,aAFnB,EAEkC,aAAaN,UAF/C;AAGM,sBAAYM,aAHlB,EAGiC,YAAYL,UAH7C;AAnBF,OADJ;AA0BD;;;;EAnDmC2B,gB;;kBAAjBlC,Q;;;AAsDrBA,SAASmC,SAAT,GAAqB;AACnB;;;AAGAjC,YAAUkC,oBAAUC,IAJD;;AAMnBlC,oBAAkBiC,oBAAUE,MANT;;AAQnB;;;AAGAlC,aAAWgC,oBAAUG,MAXF;;AAanB;;;AAGAlC,cAAY+B,oBAAUI,KAAV,CAAgB;AAC1BlB,QAAIc,oBAAUK;AADY,GAAhB,CAhBO;;AAoBnB;;;AAGA3B,cAAYsB,oBAAUE;AAvBH,CAArB;;AA0BAtC,SAAS0C,YAAT,GAAwB;AACtBvC,oBAAkB;AADI,CAAxB","file":"Progress.js","sourcesContent":["import React, {Component} from 'react';\nimport {Line}             from 'rc-progress';\nimport PropTypes          from 'prop-types';\n\nexport default class Progress extends Component {\n  render() {\n    const {progress, progressDivision, stepsData, activeStep} = this.props;\n    const color_gold = '#e5b560',\n          color_gray = '#3e4852';\n    const ua = navigator.userAgent.toLowerCase();\n    const progressWidth = (ua.search(/(iphone)|(ipod)|(android)/) === -1)\n        ? 0.2\n        : 1;\n    let {stepsTotal} = this.props;\n\n    if (stepsTotal > 0) {\n      stepsTotal = Math.round(stepsTotal / progressDivision);\n    }\n\n    let currentStepIndex = (\n      Object.keys(stepsData).findIndex((s) => s === activeStep.id)\n    );\n\n    if (currentStepIndex > 0) {\n      currentStepIndex = Math.round(currentStepIndex / progressDivision);\n    }\n\n    let percent = parseInt(((currentStepIndex + 1) / stepsTotal) * 100, 10);\n\n    return (\n        <div style={{\n          position: 'fixed',\n          bottom: '-3px',\n          width: '100%',\n          display: progress ? 'block' : 'none',\n        }}>\n          <p style={{\n            fontSize: 20,\n            color: color_gray,\n            textAlign: 'center',\n            opacity: .5,\n          }}>\n                    <span>\n                      {(currentStepIndex + 1)}\n                      <span style={{paddingLeft: 1, fontSize: 13}}>\n                        {'/' + (stepsTotal)}\n                      </span>\n                    </span>\n          </p>\n          <Line percent={percent}\n                strokeLinecap='square'\n                strokeWidth={progressWidth} strokeColor={color_gold}\n                trailWidth={progressWidth} trailColor={color_gray}/>\n        </div>\n    );\n  }\n}\n\nProgress.propTypes = {\n  /**\n   * Progress of presentation\n   */\n  progress: PropTypes.bool,\n\n  progressDivision: PropTypes.number,\n\n  /**\n   * Steps data\n   */\n  stepsData: PropTypes.object,\n\n  /**\n   * Object representing current step\n   */\n  activeStep: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n\n  /**\n   * Amount of steps\n   */\n  stepsTotal: PropTypes.number,\n};\n\nProgress.defaultProps = {\n  progressDivision: 1\n};\n"]}