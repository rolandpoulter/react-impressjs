{"version":3,"sources":["../src/components/Progress.js"],"names":["Progress","props","progress","progressDivision","stepsData","activeStep","color_gold","color_gray","ua","navigator","userAgent","toLowerCase","progressWidth","stepsTotal","Math","round","currentStepIndex","Object","keys","findIndex","s","id","percent","parseInt","display","color","width","Component","propTypes","PropTypes","bool","number","object","shape","string","defaultProps"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBA,Q;;;;;;;;;;;6BACV;AAAA,mBACqD,KAAKC,KAD1D;AAAA,UACAC,QADA,UACAA,QADA;AAAA,UACUC,gBADV,UACUA,gBADV;AAAA,UAC4BC,SAD5B,UAC4BA,SAD5B;AAAA,UACuCC,UADvC,UACuCA,UADvC;;AAEP,UAAMC,aAAa,wBAAnB;AAAA,UACMC,aAAa,wBADnB;AAEA,UAAMC,KAAKC,UAAUC,SAAV,CAAoBC,WAApB,EAAX;AACA,UAAMC,gBAAgB,CAAtB;AACA;AACA;AACA;AARO,UASFC,UATE,GASY,KAAKZ,KATjB,CASFY,UATE;;;AAWP,UAAIA,aAAa,CAAjB,EAAoB;AAClBA,qBAAaC,KAAKC,KAAL,CAAWF,aAAaV,gBAAxB,CAAb;AACD;;AAED,UAAIa,mBACFC,OAAOC,IAAP,CAAYd,SAAZ,EAAuBe,SAAvB,CAAiC,UAACC,CAAD;AAAA,eAAOA,MAAMf,WAAWgB,EAAxB;AAAA,OAAjC,CADF;;AAIA,UAAIL,mBAAmB,CAAvB,EAA0B;AACxBA,2BAAmBF,KAAKC,KAAL,CAAWC,mBAAmBb,gBAA9B,CAAnB;AACD;;AAED,UAAImB,UAAUC,SAAU,CAACP,mBAAmB,CAApB,IAAyBH,UAA1B,GAAwC,GAAjD,EAAsD,EAAtD,CAAd;;AAEA,aACI;AAAA;AAAA,UAAK,IAAG,0BAAR,EAAmC,OAAO,EAAEW,SAAStB,WAAW,OAAX,GAAqB,MAAhC,EAA1C;AACE;AAAA;AAAA,YAAG,WAAU,OAAb,EAAqB,OAAO,EAAEuB,OAAOlB,UAAT,EAA5B;AACU;AAAA;AAAA;AACIS,+BAAmB,CADvB;AAEE;AAAA;AAAA;AACG,oBAAOH;AADV;AAFF;AADV,SADF;AASE;AAAA;AAAA,YAAK,WAAU,MAAf;AACE,iDAAK,WAAU,UAAf,EAA0B,OAAO,EAAEa,OAAOJ,UAAU,GAAnB,EAAjC;AADF,SATF;AAYE;AAAA;AAAA,YAAK,WAAU,KAAf;AACE,wCAAC,gBAAD,IAAM,SAASA,OAAf;AACM,2BAAc,QADpB;AAEM,yBAAaV,aAFnB;AAGM,yBAAaN,UAHnB;AAIM,wBAAYM,aAJlB;AAKM,wBAAYL;AALlB;AADF;AAZF,OADJ;AAwBD;;;;EAlDmCoB,gB;;kBAAjB3B,Q;;;AAqDrBA,SAAS4B,SAAT,GAAqB;AACnB;;;AAGA1B,YAAU2B,oBAAUC,IAJD;;AAMnB3B,oBAAkB0B,oBAAUE,MANT;;AAQnB;;;AAGA3B,aAAWyB,oBAAUG,MAXF;;AAanB;;;AAGA3B,cAAYwB,oBAAUI,KAAV,CAAgB;AAC1BZ,QAAIQ,oBAAUK;AADY,GAAhB,CAhBO;;AAoBnB;;;AAGArB,cAAYgB,oBAAUE;AAvBH,CAArB;;AA0BA/B,SAASmC,YAAT,GAAwB;AACtBhC,oBAAkB;AADI,CAAxB","file":"Progress.js","sourcesContent":["import React, {Component} from 'react';\nimport {Line}             from 'rc-progress';\nimport PropTypes          from 'prop-types';\n\nexport default class Progress extends Component {\n  render() {\n    const {progress, progressDivision, stepsData, activeStep} = this.props;\n    const color_gold = 'rgba(240,240,120, 0.5)',\n          color_gray = 'rgba(120,120,140, 0.5)';\n    const ua = navigator.userAgent.toLowerCase();\n    const progressWidth = 1;\n    // const progressWidth = (ua.search(/(iphone)|(ipod)|(android)/) === -1)\n    //     ? 0.2\n    //     : 1;\n    let {stepsTotal} = this.props;\n\n    if (stepsTotal > 0) {\n      stepsTotal = Math.round(stepsTotal / progressDivision);\n    }\n\n    let currentStepIndex = (\n      Object.keys(stepsData).findIndex((s) => s === activeStep.id)\n    );\n\n    if (currentStepIndex > 0) {\n      currentStepIndex = Math.round(currentStepIndex / progressDivision);\n    }\n\n    let percent = parseInt(((currentStepIndex + 1) / stepsTotal) * 100, 10);\n\n    return (\n        <div id=\"react-impressjs-progress\" style={{ display: progress ? 'block' : 'none' }}>\n          <p className=\"ratio\" style={{ color: color_gray }}>\n                    <span>\n                      {(currentStepIndex + 1)}\n                      <span>\n                        {'/' + (stepsTotal)}\n                      </span>\n                    </span>\n          </p>\n          <div className=\"line\">\n            <div className=\"progress\" style={{ width: percent + '%' }} />\n          </div>\n          <div className=\"svg\">\n            <Line percent={percent}\n                  strokeLinecap='square'\n                  strokeWidth={progressWidth}\n                  strokeColor={color_gold}\n                  trailWidth={progressWidth}\n                  trailColor={color_gray}\n            />\n          </div>\n        </div>\n    );\n  }\n}\n\nProgress.propTypes = {\n  /**\n   * Progress of presentation\n   */\n  progress: PropTypes.bool,\n\n  progressDivision: PropTypes.number,\n\n  /**\n   * Steps data\n   */\n  stepsData: PropTypes.object,\n\n  /**\n   * Object representing current step\n   */\n  activeStep: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n\n  /**\n   * Amount of steps\n   */\n  stepsTotal: PropTypes.number,\n};\n\nProgress.defaultProps = {\n  progressDivision: 1\n};\n"]}