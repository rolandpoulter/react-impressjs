{"version":3,"sources":["../src/components/Progress.js"],"names":["Progress","props","progress","progressDivision","progressGroups","skipSteps","stepsData","activeStep","color_gold","color_gray","ua","navigator","userAgent","toLowerCase","progressWidth","stepsTotal","Math","round","currentStepIndex","Object","keys","findIndex","s","id","group","length","i","some","g","index","percent","parseInt","end","begin","step","floor","final","display","color","width","Component","propTypes","PropTypes","bool","number","array","object","shape","string","defaultProps"],"mappings":"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","file":"Progress.js","sourcesContent":["import React, {Component} from 'react';\nimport {Line}             from 'rc-progress';\nimport PropTypes          from 'prop-types';\n\nexport default class Progress extends Component {\n  render() {\n    const {\n      progress,\n      progressDivision,\n      progressGroups,\n      skipSteps,\n      stepsData,\n      activeStep,\n    } = this.props;\n    const color_gold = 'rgba(240,240,120, 0.5)',\n          color_gray = 'rgba(120,120,140, 0.5)';\n    const ua = navigator.userAgent.toLowerCase();\n    const progressWidth = 1;\n    // const progressWidth = (ua.search(/(iphone)|(ipod)|(android)/) === -1)\n    //     ? 0.2\n    //     : 1;\n    let {stepsTotal} = this.props;\n\n    if (stepsTotal > 0) {\n      stepsTotal = Math.round(stepsTotal / progressDivision);\n    }\n\n    let currentStepIndex = (\n      Object.keys(stepsData).findIndex((s) => s === activeStep.id)\n    );\n\n    if (currentStepIndex === -1) {\n      // debugger;\n      currentStepIndex = 0;\n    }\n\n    if (currentStepIndex > 0) {\n      // debugger;\n      currentStepIndex = Math.round(currentStepIndex / progressDivision);\n    }\n\n    // TODO: progressGroups\n    let group = progressGroups.length ? 0 : null;\n    if (progressGroups.length) {\n      // debugger;\n      let i = currentStepIndex;\n      progressGroups.some((g, index) => {\n        if (g < i) {\n          i -= g;\n          group = index;\n          return true;\n        }\n        currentStepIndex = i;\n        stepsTotal = progressGroups[group];\n        return false;\n      });\n    }\n\n    let percent = parseInt(((currentStepIndex + 1) / stepsTotal) * 100, 10);\n    const end = (currentStepIndex + 1) === stepsTotal;\n    const begin = currentStepIndex === 0;\n\n    const step = Math.floor((currentStepIndex + skipSteps) / skipSteps);\n    const final = Math.floor((stepsTotal + skipSteps) / skipSteps);\n\n    return (\n        <div\n          id=\"react-impressjs-progress\"\n          style={{ display: progress ? 'block' : 'none' }}\n          className={`num-${currentStepIndex + 1}${end ? ' end' : begin ? ' begin' : ''}`}\n        >\n          <p className=\"ratio\" style={{ color: color_gray, width: percent + '%' }}>\n            <span>\n              {step}\n              <span>\n                <span>/</span>{final}\n              </span>\n            </span>\n          </p>\n          <div className=\"line\">\n            <div className=\"progress\" style={{ width: percent + '%' }} />\n          </div>\n          <div className=\"svg\">\n            <Line percent={percent}\n                  strokeLinecap='square'\n                  strokeWidth={progressWidth}\n                  strokeColor={color_gold}\n                  trailWidth={progressWidth}\n                  trailColor={color_gray}\n            />\n          </div>\n        </div>\n    );\n  }\n}\n\nProgress.propTypes = {\n  /**\n   * Progress of presentation\n   */\n  progress: PropTypes.bool,\n\n  progressDivision: PropTypes.number,\n  progressGroups: PropTypes.array,\n\n  /**\n   * Steps data\n   */\n  stepsData: PropTypes.object,\n\n  /**\n   * Object representing current step\n   */\n  activeStep: PropTypes.shape({\n    id: PropTypes.string,\n  }),\n\n  /**\n   * Amount of steps\n   */\n  stepsTotal: PropTypes.number,\n\n  skipSteps: PropTypes.number,\n};\n\nProgress.defaultProps = {\n  progressDivision: 1,\n  progressGroups: [],\n  skipSteps: 1,\n};\n"]}